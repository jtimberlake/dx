# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

orbs:
  aws-s3: circleci/aws-s3@1.0.3
  aws-cli: circleci/aws-cli@0.1.13

executors:
  node-executor:
    docker:
      - image: circleci/node:10.15.3
    working_directory: ~/project

jobs:
  install:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - persist_to_workspace:
          root: /home/circleci
          paths: project

  lint_test_coverage:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run Linter
          command: yarn run lint
      - run:
          name: Run Tests
          command: yarn run test:coverage
      - run:
          name: Report to CodeCov
          command: npx codecov@3
      - persist_to_workspace:
          root: /home/circleci
          paths: project

  build_client: &build_client
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Build Client
          command: yarn run build
      - persist_to_workspace:
          root: /home/circleci
          paths: project/build

  build_client-dev:
    <<: *build_client
  build_client-prod:
    <<: *build_client

  deploy_client: &deploy_client
    docker:
      - image: circleci/python:2.7
    steps:
      - attach_workspace:
          at: ~/
      - aws-s3/sync:
          from: ~/project/build
          to: ${AWS_S3_BUCKET_URL}

  deploy_client-dev:
    <<: *deploy_client
  deploy_client-prod:
    <<: *deploy_client

  flush-cache: &flush-cache
    executor: aws-cli/default
    steps:
      - aws-cli/install
      - aws-cli/configure
      - run:
          name: Invalidate Index
          command: aws cloudfront create-invalidation --distribution-id ${AWS_CLOUDFRONT_DISTRIBUTION_ID} --paths /index.html

  flush-cache-dev:
    <<: *flush-cache
  flush-cache-prod:
    <<: *flush-cache

# /End of Jobs

# For production only push master
master-only: &master-only
  branches:
    only:
      - master

#For development we are pushing all other branches except master
not-master: &not-master
  branches:
    ignore:
      - master

workflows:
  build_test_deploy:
    jobs:
      - install
      - lint_test_coverage:
          requires:
            - install
      - build_client-prod:
          context: my-osu-dashboard-dev
          requires:
            - lint_test_coverage
          filters: *master-only
      - deploy_client-prod:
          context: my-osu-dashboard-dev
          requires:
            - build_client-prod
          filters: *master-only
      - flush-cache-prod:
          requires:
            - deploy_client-prod
          context: my-osu-dashboard-dev
          filters: *master-only
